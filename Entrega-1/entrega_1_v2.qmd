---
jupyter: python3
---

![](https://www.dii.uchile.cl/wp-content/uploads/2021/06/Magi%CC%81ster-en-Ciencia-de-Datos.png)

**MDS7202: Laboratorio de Programaci√≥n Cient√≠fica para Ciencia de Datos**

### üë®‚Äçüè´üë©‚Äçüè´ Cuerpo Docente:

- Profesor: Sebasti√°n Tinoco, Stefano Schiappacasse
- Auxiliar: Melanie Pe√±a Torres, Valentina Rojas Osorio
- Ayudante: Valentina Zu√±iga, √Ångelo Mu√±oz

### üë®‚Äçüíªüë©‚Äçüíª Estudiantes:
- Estudiante n¬∞1: Felipe Hern√°ndez
- Estudiante n¬∞2: Brandon Pe√±a

_Por favor, lean detalladamente las instrucciones de la tarea antes de empezar a escribir._

---

---

## üìñ Enunciado

<div align="center">
    <img src='https://raw.githubusercontent.com/MDS7202/MDS7202/refs/heads/main/recursos/2025-01/proyecto/proyecto.png' style="border-radius: 12px">
</div>

En el competitivo universo de las bebidas gaseosas, la empresa **SodAI Drinks ü•§** ha logrado destacarse por su creatividad, diversidad de productos y enfoque centrado en el cliente. Ofrece una extensa gama de bebidas carbonatadas que abarca distintos segmentos del mercado: desde productos premium en presentaciones sofisticadas, hasta gaseosas accesibles para el consumo masivo, disponibles en diversos tama√±os y tipos de envases.

La compa√±√≠a opera en m√∫ltiples regiones y zonas, sirviendo a una variedad de puntos de venta que incluyen desde tiendas de conveniencia y minimarkets hasta el canal fr√≠o tradicional. Cada tipo de cliente tiene sus particularidades: algunos reciben entregas hasta 4 veces por semana, mientras que otros son visitados por la fuerza de ventas solo una vez semanalmente. Esta diversidad de perfiles representa tanto una oportunidad como un desaf√≠o comercial: ¬øc√≥mo saber qu√© productos tienen m√°s chances de ser comprados por cada cliente en un momento dado?

Con el objetivo de aumentar la facturaci√≥n de forma inteligente y mejorar la eficiencia de su estrategia de ventas, **SodAI Drinks** decide crear una nueva c√©lula interna de innovaci√≥n: el equipo **Deep Drinkers ü§ñ**, cuyo prop√≥sito es aplicar ciencia de datos para anticiparse a las necesidades del cliente y potenciar el negocio desde una perspectiva basada en informaci√≥n.

El coraz√≥n de esta iniciativa es el desarrollo de un sistema predictivo personalizado para cada cliente. Para ello, **Deep Drinkers** convoca a un equipo de Data Scientists y especialistas en *machine learning* con una misi√≥n clara: **construir un modelo predictivo que, cada semana, pueda estimar la probabilidad de compra de cada producto del portafolio para cada cliente activo.**

El modelo deber√° tener en cuenta m√∫ltiples factores, incluyendo:
- **Tipo de cliente**, ej. "TIENDA DE CONVENIENCIA", "MINIMARKET".
- **Frecuencia de entregas y visitas**, indicadores del nivel de actividad comercial.
- **Ubicaci√≥n geogr√°fica** (por regi√≥n y zona).
- **Preferencias hist√≥ricas de consumo**, inferidas por patrones de compra anteriores.
- **Caracter√≠sticas del producto**, como marca, categor√≠a, segmento, tipo de envase y tama√±o

El objetivo final es que, **cada semana**, se genere una tabla de productos priorizados: para cada cliente, un listado de productos ordenado por su probabilidad estimada de compra. Esta informaci√≥n ser√° enviada al equipo comercial, que podr√° usarla en call center, para incrementar las chances de concretar ventas al ofrecer justo lo que el cliente probablemente quiere comprar.

Este proyecto representa un cambio de paradigma en la forma en que **SodAI Drinks** gestiona su fuerza de ventas: de un enfoque reactivo y generalista, a uno proactivo, basado en datos y profundamente personalizado. As√≠, la empresa no solo espera aumentar su rentabilidad, sino tambi√©n construir relaciones m√°s s√≥lidas con sus clientes, ofreci√©ndoles recomendaciones m√°s relevantes y oportunas.

Para lograr lo anterior, el equipo **Deep Drinkers** contar√° con los siguientes conjuntos de datos, junto a sus respectivos atributos:

- **Datos transaccionales** (`transacciones.parquet`): contiene el historial de compras realizadas por los clientes.
	- `customer_id`: identificador √∫nico del cliente que realiz√≥ la compra.
	- `product_id`: identificador √∫nico del producto comprado.
	- `purchase_date`: fecha en que se realiz√≥ la transacci√≥n.
	- `order_id`: identificar de la orden de su pedido.
	- `payment`	monto total pagado por la transacci√≥n.

- **Datos de clientes** (`clientes.parquet`): incluye las caracter√≠sticas de cada cliente.
	- `customer_id`: identificador √∫nico del cliente.
	- `region_id`: identificador de la regi√≥n geogr√°fica donde se encuentra el cliente.
	- `customer_type`: tipo de cliente seg√∫n el canal comercial, por ejemplo, ‚ÄúTIENDA DE CONVENIENCIA‚Äù.
	- `Y`: coordenada geogr√°fica de latitud.
	- `X`: coordenada geogr√°fica de longitud.
	- `num_deliver_per_week`: cantidad de entregas semanales que recibe el cliente.
	- `num_visit_per_week`: frecuencia de visitas de la fuerza de ventas por semana.

- **Datos de productos** (`productos.parquet`): describe las caracter√≠sticas de los productos del portafolio.
	- `product_id`: identificador √∫nico del producto.
	- `brand`: marca comercial del producto.
	- `category`: categor√≠a general del producto, como ‚ÄúBEBIDAS CARBONATADAS‚Äù.
	- `sub_category`: subcategor√≠a dentro de la categor√≠a principal, por ejemplo, ‚ÄúGASEOSAS‚Äù.
	- `segment`: segmento de mercado al que pertenece el producto, como ‚ÄúPREMIUM‚Äù.
	- `package`: tipo de envase del producto.
	- `size`: tama√±o del producto en litros.

## üìö Reglas

<center>
<img src="https://media1.tenor.com/m/0Qtv_cQ4ITsAAAAd/necohaus-grey-name.gif" width="450">



El proyecto consta de **dos entregas parciales** y una **entrega final** en donde la primera entrega la idea es poder reflejar lo aprendido durante la primera mitad del curso, que ser√° sobre los contenidos relacionados a *machine learning*, la segunda ser√° sobre los contenidos de la segunda mitad del curso relacionados a *MLOps* y por √∫ltimo la entrega final constar√° de dos partes, donde la primera ser√° relacionada con experimentaci√≥n sobre nuevos datasets que ser√°n disponibilizados durante las √∫ltimas semanas del curso de manera incremental y una segunda parte que ser√° el informe final escrito que deber√° explicar el desarrollo del proyecto completo, como tambien los resultados y an√°lisis de los experimentos realizados sobre los datasets incrementales. La idea es que todo el c√≥digo est√© desarrollado durante las primeras dos entregas y luego en la entrega final s√≥lo se ejecute el c√≥digo sobre nuevos conjuntos de datos.

La idea de generar el proyecto por etapas es poder aliviar la carga de trabajo en las √∫ltimas semanas del semestre donde sabemos que est√°n muy cargado con entregas, pruebas y ex√°menes de otros ramos, y as√≠ garantizamos que habiendo la desarrollado las dos primeras entregas parciales, tendr√°n el grueso del proyecto listo para luego experimentar y documentar.

---
### **Fechas de entrega**
- **Entrega parcial 1**: 14 de Mayo
- **Entrega parcial 2**: Por definir
- **Entrega final**: Por definir

---

### **Requisitos del proyecto**
- **Grupos**: Formar equipos de **2 personas**. No se aceptar√°n trabajos individuales o grupos con m√°s integrantes.
- **Consultas**: Cualquier duda fuera del horario de clases debe ser planteada en el foro correspondiente. Los mensajes enviados al equipo docente ser√°n respondidos √∫nicamente por este medio. Por favor, revisen las respuestas anteriores en el foro antes de realizar nuevas consultas.
- **Plagio**: La copia o reutilizaci√≥n no autorizada de trabajos de otros grupos est√° **estrictamente prohibida**. El incumplimiento de esta norma implicar√° la anulaci√≥n inmediata del proyecto y una posible sanci√≥n acad√©mica.
- **Material permitido**: Pueden usar cualquier material del curso, ya sea notas, lecturas, c√≥digos, o referencias proporcionadas por los docentes, que consideren √∫til para el desarrollo del proyecto.

---

### **Entregables y etapas**

#### **1. Entrega Parcial 1**  
- Dispondr√°n de los archivos de datos **productos.parquet**, **clientes.parquet** y **transacciones.parquet** para el modelamiento inicial.  
- Utilizar√°n estos archivos para desarrollar lo solicitado para la entrega 1.
- En esta etapa, se espera que apliquen todos los conocimientos aprendidos durante la primera parte del curso relacionados con *machine learning*.
- **Informe**: No se exige un avance del informe en esta etapa, s√≥lo un notebook con su desarrollo actual, pero se **recomienda comenzar** a redactar el informe final en paralelo para disminuir la carga acad√©mica en las etapas posteriores.  

#### **2. Entrega Parcial 2**  
- En esta entrega, deber√°n aplicar los conocimientos aprendidos durante la segunda mitad del curso sobre *MLOps*  
- Se espera que implementen estos conocimientos para desplegar su modelo elegido en la primera entrega y crear *pipelines* automatizados que simulen un entorno productivo.
- **Informe**: similar a la primera etapa, no se exige un avance del informe, pero se **recomienda avanzar con su redacci√≥n** para evitar una acumulaci√≥n de trabajo en la etapa final.  

#### **3. Entrega Final**  
- En la entrega final, deber√°n realizar dos etapas:
	- La primera etapa es sobre experimentaci√≥n utilizando datasets incrementales que se ir√°n disponibilizando de manera parcial, para que vayan generando predicciones con su modelo ya desplegado. El objetivo de esta etapa es poder testear su soluci√≥n *end-to-end* y que vayan analizando los resultados obtenidos a medida que se van agregando m√°s datos.
	- La segunda etapa consiste en redactar un informe final que deber√° explicar el desarrollo completo de tu proyecto y un an√°lisis profundo de sus resultados de experimentaci√≥n. Este informe debera incluir a lo menos las siguientes secciones:
		- An√°lisis exploratorio de datos  
		- Metodolog√≠a aplicada  
		- Selecci√≥n y entrenamiento de modelos  
		- Evaluaci√≥n de resultados  
		- Optimizaci√≥n de modelos
		- Interpretabilidad
		- Re-entrenamiento
		- Tracking con MLFlow
		- Creaci√≥n de la aplicaci√≥n web con Gradio y FastAPI

Es **altamente recomendable** ir redactando el informe en paralelo al desarrollo de los modelos para garantizar que toda la informaci√≥n relevante quede documentada adecuadamente.  

### Nota Final

La calificaci√≥n final de su proyecto se calcular√° utilizando la siguiente ponderaci√≥n:

$$Nota Final = 0.30 * EntregaParcial1 + 0.40 * EntregaParcial2 + 0.30 * EntregaFinal$$

---

### **Instrucciones importantes**

1. **Formato del informe**:  
   - El informe debe estar integrado dentro de un **Jupyter Notebook**. No es necesario subirlo a una plataforma externa, pero debe cumplir con los siguientes requisitos:  
     - Estructura clara y ordenada.  
     - C√≥digo acompa√±ado de explicaciones detalladas.  
     - Resultados presentados de forma visual y anal√≠tica.  

2. **Descuento por informes deficientes**:  
   - Cualquier secci√≥n del informe que no tenga una explicaci√≥n adecuada o no respete el formato ser√° penalizada con un descuento en la nota. Esto incluye c√≥digo sin comentarios o an√°lisis que no sean coherentes con los resultados presentados.
   - Comentarios sin formatear de ChatGPT o herramientas similares ser√°n penalizados (e.g: "Inserta tu modelo ac√°", etc.)

# üì¨ Entrega Parcial 1 (30% del Proyecto)

### üì™ Fecha de Entrega: 14 de Mayo

## üìå Abstract [0.25 puntos]

<center>
<img src="https://i.redd.it/h5ptnsyabqvd1.gif" width="400" height="300">

En esta secci√≥n, deben redactar un Abstract claro y conciso para su proyecto. El Abstract debe responder a las siguientes preguntas clave:

- **Descripci√≥n del problema**: ¬øCu√°l es el objetivo del proyecto? ¬øQu√© se intenta predecir o analizar?
- **Datos de entrada**: ¬øQu√© datos tienen disponibles? ¬øCu√°les son sus principales caracter√≠sticas?
- **M√©trica de evaluaci√≥n**: ¬øC√≥mo medir√°n el desempe√±o de sus modelos? Expliquen por qu√© eligieron esta m√©trica bas√°ndose en el an√°lisis exploratorio de los datos.
- **Modelos y transformaciones**: ¬øQu√© modelos utilizar√°n y por qu√©? ¬øQu√© transformaciones o preprocesamientos aplicaron a los datos?
- **Resultados generales**: ¬øEl modelo final cumpli√≥ con los objetivos del proyecto? ¬øCu√°les fueron las conclusiones m√°s importantes?

**Importante**: Escriban esto despues de haber resuelto el resto de la tarea.

> [Escriba aqu√≠ su Abstract]

## üìå Pre-procesamiento [0.5 puntos]

<center>
<img src="https://media0.giphy.com/media/10zsjaH4g0GgmY/giphy.gif?cid=6c09b9523xtlunksc9amikw09zk1bmiqwjqnt70ae82rk877&ep=v1_gifs_search&rid=giphy.gif&ct=g" width="400" height="300">

Tal como en muchos otros problemas de negocio, los datos probablemente deben ser pre procesados antes de aplicar cualquier t√©cnica de anal√≠tica. Bajo esa premisa, en esta secci√≥n deben desarrollar c√≥digo que les permita **preparar los datos** de tal forma que les permita resolver el problema planteado. Para esto, pueden aplicar procesamientos como:

- Transformaciones de tipo de dato (str, int, etc)
- Cruce de informaci√≥n
- Eliminaci√≥n de duplicados
- Filtros de fila y/o columnas

*Hint: ¬øQu√© forma deber√≠a tener la data para resolver un problema de aprendizaje supervisado?*

Todo proceso llevado a cabo debe estar bien documentado y justificado en el informe, explicando el por qu√© se decidi√≥ realizar en funcion de los datos presentados y los objetivos planteados del proyecto.

```{python}
# Lectura de datos
import pandas as pd

clientes_df = pd.read_parquet('clientes.parquet')
productos_df = pd.read_parquet('productos.parquet')
transacciones_df = pd.read_parquet('transacciones.parquet')

# Definici√≥n de random state
RANDOM_STATE = 99
```

```{python}
#| colab: {base_uri: https://localhost:8080/}
# Verificaci√≥n de cantidad de nulos y tipo de dato
print('Verificaci√≥n de cantidad de nulos y tipo de dato en clientes.parquet')
clientes_df.info()

print('\nVerificaci√≥n de cantidad de nulos y tipo de dato en productos.parquet')
print(productos_df.info())

print('\nVerificaci√≥n de cantidad de nulos y tipo de dato en transacciones.parquet')
print(transacciones_df.info())
```

```{python}
# Transformaci√≥n de tipos de dato
clientes_categories = ['customer_id', 'region_id', 'zone_id', 'customer_type']
productos_categories = ['product_id', 'brand', 'category', 'sub_category' ,'segment', 'package']
transacciones_categories = ['customer_id', 'product_id', 'order_id']

clientes_df[clientes_categories] = clientes_df[clientes_categories].astype('category')
productos_df[productos_categories] = productos_df[productos_categories].astype('category')
transacciones_df[transacciones_categories] = transacciones_df[transacciones_categories].astype('category')
```

```{python}
#| colab: {base_uri: https://localhost:8080/}
# Verificaci√≥n de registros duplicados
print('Cantidad de filas duplicadas en clientes.parquet:', len(clientes_df) - len(clientes_df.drop_duplicates()))
print('Cantidad de filas duplicadas en productos.parquet:', len(productos_df) - len(productos_df.drop_duplicates()))
print('Cantidad de filas duplicadas en transacciones.parquet:', len(transacciones_df) - len(transacciones_df.drop_duplicates()))
```

```{python}
#| colab: {base_uri: https://localhost:8080/}
# Cantidad de compras/devoluciones de un mismo producto
compras_df = transacciones_df[transacciones_df['items'] > 0]
devoluciones_df = transacciones_df[transacciones_df['items'] < 0]

print('Cantidad de transacciones totales:', len(transacciones_df))
print('Cantidad de transacciones con una compra del mismo producto en la misma cantidad en una misma orden:', len(compras_df) - len(compras_df[['customer_id', 'product_id', 'order_id', 'items']].drop_duplicates()))
print('Cantidad de transacciones con una devoluci√≥n del mismo producto en la misma cantidad en una misma orden:', len(devoluciones_df) - len(devoluciones_df[['customer_id', 'product_id', 'order_id', 'items']].drop_duplicates()))
```

Se observa que existen √≥rdenes de pedido donde un producto se compra o devuelve m√°s de una vez. La compra de un producto m√°s de una vez ocurre en 3220 transacciones, mientras que la devoluci√≥n ocurre en 38.

Se considerar√° que la compra de un producto m√°s de una vez es esperable, dado que as√≠ como ocurren devoluciones por comprar extra, pueden ocurrir m√°s compras por haber solicitado menos de lo necesario.

Sin embargo, la devoluci√≥n de un producto en dos ocasiones en la misma orden y en la misma cantidad se considerar√° un evento extra√±o, que no se puede asegurar que ocurri√≥ realmente, y se categorizar√°n como outlier para eliminar los duplicados de `transacciones.parquet`.

```{python}
#| colab: {base_uri: https://localhost:8080/}
# Eliminaci√≥n de duplicados de √≥rdenes con devoluciones sospechosas
suspicious_orders = devoluciones_df.loc[~devoluciones_df.index.isin(devoluciones_df[['customer_id', 'product_id', 'order_id', 'items']].drop_duplicates().index)]['order_id']
transacciones_df = transacciones_df[~transacciones_df['order_id'].isin(suspicious_orders)]
print('Cantidad de √≥rdenes post eliminaci√≥n:', len(transacciones_df['order_id'].unique()))
```

```{python}
#| colab: {base_uri: https://localhost:8080/, height: 424}
# Agrupaci√≥n de datos
bought_df = transacciones_df.groupby(by=[c for c in transacciones_df.columns if c != 'items'], observed=True).sum().reset_index()
bought_df
```

```{python}
#| colab: {base_uri: https://localhost:8080/, height: 617}
# Cruce de informacion
sodai_df = bought_df.merge(productos_df, on='product_id').merge(clientes_df, on='customer_id')
sodai_df
```

```{python}
# Funcion auxiliar para crear registros con etiqueta negativa
import itertools

def add_negative_class_rows(df, how='inbalanced'):
    customer_ids = transacciones_df['customer_id'].unique()
    product_ids = transacciones_df['product_id'].unique()
    weeks = list(range(df['week'].min(), df['week'].max() + 1))

    # Filas candidatas a ser negativos
    candidates = set(itertools.product(customer_ids, product_ids, weeks))

    # Filas originales del dataset
    originals = set(df[['customer_id', 'product_id', 'week']].itertuples(index=False, name=None))

    # Obtenci√≥n de negativos
    negative_df = pd.DataFrame(list(candidates - originals), columns=['customer_id', 'product_id', 'week'])

    if how == 'balanced':
        negative_df = negative_df.sample(len(df), random_state=RANDOM_STATE)

    # A√±adir filas a dataset
    sodai_negative_df = negative_df.merge(productos_df, on='product_id').merge(clientes_df, on='customer_id')
    sodai_negative_df['buy'] = 0
    sodai_negative_df['items'] = 0

    return pd.concat([df, sodai_negative_df])
```

```{python}
#| colab: {base_uri: https://localhost:8080/, height: 617}
# Creaci√≥n de dataset agrupado por semana
sodai_week_df = sodai_df.copy()
sodai_week_df = sodai_week_df[sodai_week_df['items'] > 0]
sodai_week_df['week'] = sodai_week_df['purchase_date'].apply(lambda x: x.isocalendar().week)
sodai_week_df = sodai_week_df.sort_values('purchase_date')
df_items = sodai_week_df.groupby(['customer_id', 'product_id', 'week'], as_index=False)['items'].sum()
sodai_week_df = sodai_week_df.drop(columns=['purchase_date', 'order_id', 'items']).drop_duplicates()
sodai_week_df = sodai_week_df.merge(df_items, on=['customer_id', 'product_id', 'week'])
sodai_week_df['buy'] = 1

# Incorporar datos de no compras
sodai_week_df = add_negative_class_rows(sodai_week_df)
sodai_week_df
```

## üìå EDA [0.5 puntos]

<center>
<img src="https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExbHZ6aGdkd21tYTI3cW8zYWhyYW5wdGlyb2s3MmRzeTV0dzQ1NWlueiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3k1hJubTtOAKPKx4k3/giphy.gif" width="400" height="200">

En esta secci√≥n, se debe realizar un an√°lisis exploratorio de los datos para comprender su estructura, detectar posibles problemas y obtener informaci√≥n relevante para el entrenamiento de los modelos. La idea es que puedan detectar **patrones en los datos** que les permitan resolver el problema con mayor facilidad.

Se deben responder preguntas a partir de lo que puedan visualizar/obtener, por ejemplo:

- Clientes y productos

    - ¬øCu√°ntos clientes √∫nicos hay en el dataset?

    - ¬øCu√°ntos productos √∫nicos se encuentran en los datos?

- Periodo y frecuencia

    - ¬øDe qu√© periodo es la informaci√≥n disponible?

    - ¬øCu√°l es la frecuencia de los registros (diaria, semanal, mensual, etc.)?

- Calidad de los datos

    - ¬øExisten valores nulos en el dataset? ¬øCu√°ntos? ¬øC√≥mo se pueden tratar?

    - ¬øHay datos raros, como cantidades negativas o inconsistencias? Genere tests de validaci√≥n para identificar estos problemas.

- Patrones de compra

    - ¬øCu√°ntos productos compra en promedio cada cliente semana a semana?

    - ¬øCu√°ntas transacciones ha realizado cada cliente?

    - ¬øCu√°l es el periodo de recompra promedio de cada SKU?

```{python}
#| colab: {base_uri: https://localhost:8080/, height: 412}
# An√°lisis de clientes
print('Medidas de tendencia central y dispersi√≥n de Clientes')
clientes_df.describe(include='all')
```

```{python}
#| colab: {base_uri: https://localhost:8080/, height: 412}
# An√°lisis de productos
print('Medidas de tendencia central y dispersi√≥n de Productos')
productos_df.describe(include='all')
```

```{python}
#| colab: {base_uri: https://localhost:8080/}
# An√°lisis de periodo y frecuencia
transacciones_df['purchase_date'].sort_values().unique()
```

Los datos se concentran en 366 fechas, desde el 2024-01-01 hasta el 2024-12-31, luego, corresponden a registros con periodicidad diaria del a√±o 2024 completo.

```{python}
#| colab: {base_uri: https://localhost:8080/}
# Calidad de datos
print('N√∫mero de √≥rdenes con cantidad de productos negativa', len(sodai_df[sodai_df['items'] < 0]))
```

```{python}
#| colab: {base_uri: https://localhost:8080/, height: 542}
# Distribuci√≥n de productos comprados por semana
import plotly.express as px

mean_products_week_df = sodai_df.copy()
mean_products_week_df['week'] = mean_products_week_df['purchase_date'].apply(lambda x: x.isocalendar().week)

mean_products_week_df = mean_products_week_df[['customer_id', 'week', 'product_id']].groupby(by=['customer_id', 'week']).nunique().reset_index()#.rename(columns=['customer_id', 'compra_semanal'])
mean_products_week_df = mean_products_week_df[['customer_id', 'product_id']].groupby(by=['customer_id']).mean().reset_index()
px.histogram(mean_products_week_df, 'product_id')
```

```{python}
#| colab: {base_uri: https://localhost:8080/, height: 542}
# Cantidad de datos por semana
count_data_week_df = sodai_week_df[sodai_week_df['buy'] == 1][['week', 'product_id']].groupby(by=['week']).count().reset_index()
px.line(count_data_week_df, x='week', y='product_id')
```

## üìå Holdout [0.25 puntos]

Para evaluar correctamente el modelo y garantizar su capacidad de generalizaci√≥n, se deben dividir los datos en tres conjuntos:
- `Entrenamiento` : Para ajustar los par√°metros.
- `Validaci√≥n`: Para optimizar hiperpar√°metros y seleccionar el mejor modelo.
- `Prueba` : Para evaluar el rendimiento final en datos no vistos.

üëÄ **Hint**: *Recuerde que los datos tienen una temporalidad que debe considerarse al momento de separarlos, para evitar fugas de informaci√≥n. Es importante justificar la estrategia de partici√≥n elegida y visualizar la distribuci√≥n temporal de los conjuntos generados*

```{python}
# Funcion para realizar undersampling
def undersample(df, how='imbalanced'):
    # Separar dataframes por clase
    neg_df = df[df['buy'] == 0]
    pos_df = df[df['buy'] == 1]

    # Obtener tama√±o de clase minoritaria
    minority_size = min(len(neg_df), len(pos_df))

    if how == 'balanced':
        # Undersample the majority class
        neg_df_undersampled = neg_df.sample(minority_size, random_state=RANDOM_STATE)
        pos_df_undersampled = pos_df.sample(minority_size, random_state=RANDOM_STATE)

    else:
        if len(neg_df) < len(pos_df):
            # Undersample the majority class
            neg_df_undersampled = neg_df.sample(minority_size, random_state=RANDOM_STATE)
            pos_df_undersampled = pos_df.sample(minority_size * 5, random_state=RANDOM_STATE)
        else:
            # Undersample the majority class
            neg_df_undersampled = neg_df.sample(minority_size * 5, random_state=RANDOM_STATE)
            pos_df_undersampled = pos_df.sample(minority_size, random_state=RANDOM_STATE)

    # Combine and preserve temporal order
    df_undersampled = pd.concat([neg_df_undersampled, pos_df_undersampled]).sort_values(by='week')
    return df_undersampled
```

```{python}
# Divisi√≥n de datos en entrenamiento, validaci√≥n y prueba
train_df = undersample(sodai_week_df[sodai_week_df['week'] <= 37], 'balanced')
val_df = undersample(sodai_week_df[(sodai_week_df['week'] > 37) & (sodai_week_df['week'] <= 47)])
test_df = undersample(sodai_week_df[sodai_week_df['week'] >= 48])

X_train, y_train = train_df.drop(columns=['buy']), train_df['buy']
X_val, y_val = val_df.drop(columns=['buy']), val_df['buy']
X_test, y_test = test_df.drop(columns=['buy']), test_df['buy']
```

## üìå Feature Engineering [0.5 puntos]

<center>
<img src="https://i.imgur.com/CmXZSSC.gif" width="300" height="200">

En esta secci√≥n, se deben construir pipelines para automatizar el preprocesamiento de los datos, lo cual garantizar√° que el flujo de trabajo sea reproducible y eficiente para esta entrega y las futuras. El objetivo es aplicar una serie de transformaciones en un orden definido para asegurar que los datos est√©n listos para los modelos a entrenar. El pipeline final debe incluir las t√©cnicas de pre-procesamiento que se deben aplicar a los distintos datos (seg√∫n lo que consideren necesario para el problema). Por ejemplo:

- **Imputaci√≥n de valores nulos**: Manejo de datos faltantes mediante estrategias adecuadas (media, mediana, moda, interpolaci√≥n, etc.).

- **Transformaciones personalizadas**: Uso de ColumnTransformer para aplicar diferentes transformaciones a columnas espec√≠ficas.

- **Codificaci√≥n de variables categ√≥ricas**: Convertir datos categ√≥ricos a un formato num√©rico adecuado (One-Hot Encoding, Label Encoding, etc.).

- **Discretizaci√≥n de variables**: Conversi√≥n de variables num√©ricas continuas en categor√≠as si son relevantes para el desempe√±o del modelo a entrenar.

- **Estandarizaci√≥n o normalizaci√≥n** : Ajustar la escala de los datos para mejorar el rendimiento de los algoritmos sensibles a la magnitud de las variables.

- **Eliminaci√≥n o transformaci√≥n de valores at√≠picos**: Identificar y tratar con datos outliers para mejorar la robustez del modelo.

- **Nuevas caracter√≠sticas** : Creaci√≥n de variables adicionales que puedan aportar informaci√≥n relevante al modelo.

Cada una de estas transformaciones debe ser justificada en funci√≥n de su relevancia para el problema y los datos, y es importante evaluar su impacto en el rendimiento del modelo. Adem√°s, el pipeline debe ser flexible y modular para poder probar diferentes configuraciones de preprocesamiento.

```{python}
# Funciones auxiliares para crear variables
def create_mean_past_items(df):
    # Se ordenan las filas temporalmente
    df = df.sort_values(by=['customer_id', 'product_id', 'week'])

    # Se agrupa para obtener el promedio de items con un shift de 1 (hasta la semana anterior)
    df['mean_past_items'] = (
        df.groupby(['customer_id', 'product_id'])['items']
        .transform(lambda x: x.shift(1).expanding().mean())
    )

    # Se completan los valores NaN con 0, indicando que no hubieron compras recientes
    df['mean_past_items'] = df['mean_past_items'].fillna(0)

    return df
```

```{python}
#| colab: {base_uri: https://localhost:8080/, height: 149}
# Definici√≥n de transformers
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import FunctionTransformer, MinMaxScaler, OneHotEncoder

custom_features = FunctionTransformer(create_mean_past_items)

preprocessing = ColumnTransformer(
    [
        (
            "Scale",
            MinMaxScaler(),
            [
                "Y", "X", "num_deliver_per_week", "num_visit_per_week", "mean_past_items",
            ],
        ),
        (
            "One Hot Encoding",
            OneHotEncoder(sparse_output=False, handle_unknown="ignore"),
            [
                "brand", "category", "sub_category", "segment", "package", "size", "region_id", "zone_id", "customer_type",
            ],
        ),
    ],
)

preprocessing.set_output(transform='pandas')
```

## üìå Baseline [0.25 puntos]

<center>
<img src="https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExN3lzeGFqZmU3NzJrZHllNjRmaHVzczJpZ29rdHdlMzVpZnQwNXo1diZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/qAtZM2gvjWhPjmclZE/giphy.gif" width="300" height="200">

En esta secci√≥n se debe construir el modelo m√°s sencillo posible que pueda resolver el problema planteado, conocido como **Modelo baseline**. Su prop√≥sito es servir como referencia para comparar el rendimiento de los modelos m√°s avanzados desarrollados en etapas posteriores.  

Pasos requeridos:  
- Implemente, entrene y eval√∫e un modelo b√°sico utilizando un pipeline.  
- Aseg√∫rese de incluir en el pipeline las transformaciones del preprocesamiento realizadas previamente junto con un clasificador b√°sico.  
- Eval√∫e el modelo y presente el informe de m√©tricas utilizando **`classification_report`**.  

Documente claramente c√≥mo se cre√≥ el modelo, las decisiones tomadas y los resultados obtenidos. Este modelo ser√° la base comparativa en las secciones posteriores.

```{python}
# Definici√≥n de pipeline
from sklearn.pipeline import Pipeline
from sklearn.dummy import DummyClassifier

baseline_pipeline = Pipeline(
    steps=[
        ("Custom Features", custom_features),
        ("Preprocessing", preprocessing),
        ("Classification", DummyClassifier())
    ]
)
```

```{python}
#| colab: {base_uri: https://localhost:8080/}
# Entrenamiento
baseline_pipeline.fit(X_train, y_train)

# Evaluaci√≥n
from sklearn.metrics import  classification_report
y_pred_baseline = baseline_pipeline.predict(X_val)
print(f'Classification Report\n{classification_report(y_pred_baseline, y_val)}')
```

## üìå Elecci√≥n de modelo [0.75 puntos]

En esta secci√≥n deben escoger un modelo que se adapte a las necesidades del negocio. Para esto, pruebe al menos 3 modelos y desarrolle los siguientes aspectos para cada uno:

- **Estructura y diferencias entre los modelos**: Explicar brevemente cada uno y sus hip√©rpar√°metros de mayor importancia.
- **Clasificadores recomendados**:
  - `LogisticRegression`
  - `KNeighborsClassifier`
  - `DecisionTreeClassifier`
  - `SVC`
  - `RandomForestClassifier`
  - `LightGBMClassifier` (del paquete `lightgbm`)
  - `XGBClassifier` (del paquete `xgboost`)
  - Otro (seg√∫n lo que se estime adecuado)
  
- **Evaluaci√≥n de resultados**: Se utilizar√° el **`classification_report`** para evaluar el rendimiento de cada modelo, destacando m√©tricas clave como precisi√≥n, recall y F1-score. **Importante: No optimicen hiperpar√°metros, la idea es hacer una selecci√≥n r√°pida del modelo.**

**Nota:** Pueden ocupar mas de 1 **instancia** de modelo para resolver el problema (e.g: (modelo_1, grupo_1), (modelo_2, grupo_2), ...).
  
A continuaci√≥n, se deben responder las siguientes preguntas para evaluar el rendimiento de los modelos entrenados:

1. ¬øHay alg√∫n clasificador que supere al modelo baseline?  
2. ¬øCu√°l es el mejor clasificador entrenado y por qu√©?  
3. ¬øQu√© factores hacen que el mejor clasificador sea superior a los otros?  
4. En t√©rminos de `tiempo de entrenamiento`, ¬øQu√© modelo considera m√°s adecuado para experimentar con grillas de optimizaci√≥n?

```{python}
#| colab: {base_uri: https://localhost:8080/}
# Modelo 1: Regresi√≥n Log√≠stica
from sklearn.linear_model import LogisticRegression

lr_pipeline = Pipeline(
    steps=[
        ("Custom Features", custom_features),
        ("Preprocessing", preprocessing),
        ("Classification", LogisticRegression())
    ]
)

# Entrenamiento
lr_pipeline.fit(X_train, y_train)

# Evaluaci√≥n
y_pred_lr = lr_pipeline.predict(X_val)
print(f'Classification Report\n{classification_report(y_pred_lr, y_val)}')
```

```{python}
# Modelo 2: Support-Vector Classifier
from sklearn.svm import SVC

svc_pipeline = Pipeline(
    steps=[
        ("Custom Features", custom_features),
        ("Preprocessing", preprocessing),
        ("Classification", SVC())
    ]
)

# Entrenamiento
svc_pipeline.fit(X_train, y_train)

# Evaluaci√≥n
y_pred_svc = svc_pipeline.predict(X_val)
print(f'Classification Report\n{classification_report(y_pred_svc, y_val)}')
```

```{python}
# Modelo 3: XGBoost
from xgboost import XGBClassifier

xgboost_pipeline = Pipeline(
    steps=[
        ("Custom Features", custom_features),
        ("Preprocessing", preprocessing),
        ("Classification", XGBClassifier())
    ]
)

# Entrenamiento
xgboost_pipeline.fit(X_train, y_train)

# Evaluaci√≥n
y_pred_xgboost = xgboost_pipeline.predict(X_val)
print(f'Classification Report\n{classification_report(y_pred_xgboost, y_val)}')
```

## üìå Optimizaci√≥n de Hiperpar√°metros [1.0 puntos]

<center>
<img src="https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExcXJkNzdhYjlneHplaGpsbnVkdzh5dnY3Y2VyaTIzamszdGR1czJ2diZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/2rqEdFfkMzXmo/giphy.gif" width="300" height="200">

A partir de su an√°lisis anterior, se debe proceder a optimizar el rendimiento del modelo seleccionado mediante la optimizaci√≥n de sus hiperpar√°metros. Para ello, se espera que implementen `Optuna` para optimizar no solo los hiperpar√°metros del modelo, sino tambi√©n los de los preprocesadores utilizados (por ejemplo, OneHot Encoding, Scalers, etc.).

Al desarrollar este proceso, deber√°n responder las siguientes preguntas clave como m√≠nimo:

- ¬øQu√© m√©trica decidieron optimizar y por qu√©?

- ¬øQu√© hiperpar√°metro tuvo un mayor impacto en el rendimiento de su modelo?

- ¬øCu√°nto mejor√≥ el rendimiento del modelo despu√©s de la optimizaci√≥n de hiperpar√°metros?

```{python}
!pip install optuna
```

```{python}
# Definici√≥n de funci√≥n objetivo
import optuna
from optuna.samplers import TPESampler
from sklearn.metrics import f1_score

def objective(trial):

    # Hiperparametros a optimizar
    xgb_params = {
        "learning_rate": trial.suggest_float("learning_rate", 0.001, 0.1),
        "n_estimators": trial.suggest_int("n_estimators", 50, 1000),
        "max_depth": trial.suggest_int("max_depth", 3, 10),
        "max_leaves": trial.suggest_int("max_leaves", 0, 100),
        "min_child_weight": trial.suggest_int("min_child_weight", 1, 5),
        "reg_alpha": trial.suggest_float("reg_alpha", 0, 1),
        "reg_lambda": trial.suggest_float("reg_lambda", 0, 1),
    }

    # Definici√≥n de pipeline
    pipeline = Pipeline(
        steps=[
            ("Custom Features", custom_features),
            ("Preprocessing", preprocessing),
            ("Classification",XGBClassifier(seed=RANDOM_STATE, **xgb_params))
        ]
    )

    # Evaluaci√≥n
    pipeline.fit(X_train, y_train)
    pred = pipeline.predict(X_val)
    f1 = f1_score(y_val, pred)

    # Guardado de pipeline en atributos del trial
    trial.set_user_attr("pipeline", pipeline)

    return f1
```

```{python}
# Optimizaci√≥n
study = optuna.create_study(direction="minimize")
study.optimize(objective, timeout=300)
print('N√∫mero de trials:', len(study.get_trials()))
print('Mejores hiperpar√°metros:', study.best_trial.params)
print('Mejor F1-Score:', study.best_value)
```

## üìå Interpretabilidad [1.0 puntos]

En esta secci√≥n, deben explicar el funcionamiento de su modelo utilizando las t√©cnicas de interpretabilidad vistas en clase, como `SHAP`. Se espera que sean capaces de descomponer las predicciones y evaluar la importancia de los atributos y las interacciones entre ellos, con el fin de obtener una comprensi√≥n m√°s profunda de c√≥mo el modelo toma decisiones.

Al desarrollar esta parte, deber√°n responder las siguientes preguntas clave como m√≠nimo:

- ¬øPodr√≠a explicar el funcionamiento de su modelo para una predicci√≥n en particular? Si es as√≠, proporcione al menos tres ejemplos espec√≠ficos, describiendo c√≥mo el modelo lleg√≥ a sus decisiones y qu√© factores fueron m√°s relevantes en cada caso.

- ¬øQu√© atributo tiene una mayor importancia en la salida de su modelo? Analice si esto tiene sentido con el problema planteado y justifique la relevancia de dicho atributo en el contexto de las predicciones que se realizan.

- ¬øExiste alguna interacci√≥n entre atributos que sea relevante para el modelo? Investigue si la combinaci√≥n de ciertos atributos tiene un impacto significativo en las predicciones y expl√≠quela en **detalle**.

- ¬øPodr√≠a existir sesgo hacia alg√∫n atributo en particular? Reflexione sobre la posibilidad de que el modelo est√© favoreciendo ciertos atributos. Si es as√≠, ¬øcu√°l podr√≠a ser la causa y qu√© impacto podr√≠a tener esto en la predicci√≥n?

```{python}
!pip install alibi
!pip install shap
```

```{python}
# Data preparation for anchor

sub_pipeline = study.best_trial.user_attrs['pipeline'].steps[:-1]
processed_x_train = sub_pipeline.transform(X_train)
processed_x_test = sub_pipeline.transform(X_test)
```

```{python}
# Desarrolle aqu√≠ su c√≥digo
# Anchors for local interpretability

from alibi.explainers import AnchorTabular

# clf = mejor modelo de optuna

clf = study.best_trial.user_attrs['pipeline'].named_steps['Classification']
predict_fn = lambda x: clf.predict(x) # creamos funci√≥n de predicci√≥n
explainer = AnchorTabular(predict_fn, clf.feature_names_in_, seed=1) # instanciamos Anchor usando funci√≥n creada
explainer.fit(processed_x_train_train.to_numpy()) # sobre los datos
```

```{python}
import numpy as np

idx = 5 # √≠ndice obs a predecir
obs = np.array(X_test.iloc[idx], ndmin = 2) # array de la obs

# generar anchor
explanation = explainer.explain(obs, # obs a explicar
                                threshold=0.95, # min precision de anchor
                                )

print('Prediction: ', explainer.predictor(processed_x_test.to_numpy()[idx].reshape(1, -1))[0]) # obtener prediccion del modelo
print('Anchor: %s' % (' AND '.join(explanation.anchor))) # obtener regla
print('Precision: %.2f' % explanation.precision) # obtener precision
print('Coverage: %.2f' % explanation.coverage) # obtener cobertura
```

```{python}
import shap
import xgboost as xgb
import matplotlib.pyplot as plt

# weight: numbero de veces que una feature es usada para dividir la data
xgb.plot_importance(clf, max_num_features=20)
plt.title("Feature Importance con importance_type='weight'")
plt.show()

```

```{python}
explainer = shap.TreeExplainer(clf)
# cambiar X por el 'x' de mi dataset completo
shap_values = explainer(X)
```

```{python}
shap_values
```

```{python}
shap_values.values[1,:].shape
```

```{python}
np.exp(shap_values.base_values) / (1 + np.exp(shap_values.base_values))
```

## üìå Resultados y Conclusiones [1.0 puntos]

Para finalizar, se deben explicar los desarrollos y resultados obtenidos a lo largo de todo el proceso, desde la selecci√≥n de las variables hasta la optimizaci√≥n de hiperpar√°metros e interpretaci√≥n. Se espera una reflexi√≥n cr√≠tica sobre el desempe√±o de los modelos entrenados y una comparaci√≥n entre los diferentes enfoques. Adem√°s, deber√°n abordar los siguientes puntos clave:

- **An√°lisis de m√©tricas**: Comenten sobre las m√©tricas obtenidas en cada etapa del modelo, destacando las m√°s relevantes como precisi√≥n, recall, F1-score, etc. ¬øCu√°les fueron los modelos m√°s efectivos? ¬øQu√© diferencias notables encontr√≥ entre ellos?

- **Impacto de las decisiones tomadas**: Reflexionen sobre c√≥mo las decisiones relacionadas con el preprocesamiento, selecci√≥n de atributos y optimizaci√≥n de hiperpar√°metros influyeron en los resultados finales. ¬øHubo alguna decisi√≥n que haya tenido un impacto notable en el rendimiento?

- **Lecciones aprendidas**: Concluyan sobre las lecciones m√°s importantes que aprendieron durante el proceso y c√≥mo estas pueden influir en futuras iteraciones del modelo. ¬øQu√© se podr√≠a mejorar si se repitiera el proceso? Si tuvieran m√°s recursos y tiempo, ¬øqu√© otras t√©cnicas/herramientas habr√≠an utilizado?

> [Escriba aqu√≠ sus resultados]

Mucho √©xito!

<center>
<img src="https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExaHpvOTY5Z3hpdHI3aDBpdGRueXRqamZncXp2emFrbjJ5M2s5eTR1dSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/1PMVNNKVIL8Ig/giphy.gif" width="300" height="200">

